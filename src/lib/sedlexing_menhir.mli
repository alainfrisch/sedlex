(** Runtime support for lexers generated by [sedlex.menhir]. *)

(** This module includes some function that cooperate with menhir *)

exception ParseError of (string * int * int)

val current_position: ?file:string -> Sedlexing.lexbuf -> string * int * int
(** [Sedlexing_menhir.current_position] returns position information
    [(file, lexbuf.line, lexbuf.pos-lexbuf.bol)] for error and information use *)

val current_lexing_position: ?file:string -> Sedlexing.lexbuf -> Lexing.position
(** [Sedlexing_menhir.current_lexing_position] returns
    position information in the type [Lexing.position] *)

val string_of_ParseError: (string * int * int) -> string
(** [Sedlexing_menhir.string_of_ParseError] returns error message string
    from position information obtained from [Sedlexing_menhir.current_position] *)

val sedlex_with_menhir: ?file:string -> ('token, 'ast) MenhirLib.Convert.traditional -> (Sedlexing.lexbuf -> 'token) -> Sedlexing.lexbuf -> 'ast
(** [Sedlexing_menhir.sedlex_with_menhir] bridges
    [('token, 'ast) MenhirLib.Convert.traditional] and [(Sedlexing.lexbuf -> 'token)]
    and returns a function that consumes [Sedlexing.lexbuf] and generates ['ast] *)
