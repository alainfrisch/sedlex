sedlex: a OCaml lexer generator for Unicode

License:
  Copyright (C) 2003, 2004, 2005, 2006, 2013 Alain Frisch and LexiFi
  distributed under the terms of an MIT-like license : see LICENSE

Homepage: http://www.lexifi.com/sedlex
Contact: alain.frisch@lexifi.com

--------------------------------------------------------------------------
Overview

- sedlex is a lexer generator for OCaml.

- It is implemented as an OCaml syntax tree rewriter (-ppx).  Lexer
  specifications are embedded in regular OCaml code and use the
  standard OCaml syntax (interpreted in a specific way).

- The lexers work with a new kind of "lexbuf" that supports Unicode.
  A single lexer can work with arbitrary encodings of the input
  stream.

- sedlex is the successor of the ulex project, which was implemented
  as a Camlp4 syntax extension.

--------------------------------------------------------------------------
Lexer specifications

sedlex adds a new kind of expression to OCaml: lexer definitions.
The syntax for the new construction is:

  match%sedlex lexbuf with
  | R1 -> e1
  ...
  | Rn -> en
  | _  -> def

or:

  [%sedlex match lexbuf with 
  | R1 -> e1
  ...
  | Rn -> en
  | _  -> def
  ]

(The first vertical bar is optional as in any OCaml pattern matching.
Guard expressions are not allowed.)

where:
 - lexbuf is an arbitrary lowercase identifier, which must refer to
   an existing value of type [Sedlexing.lexbuf].
 - the Ri are regular expressions (see below);
 - the ei and def are OCaml expressions (called actions) of the same type
   (the type for the whole lexer definitioon).

Unlike ocamllex, lexers work on stream of Unicode codepoints, not
bytes.

The actions can call functions from the Sedlexing module to extract
(parts of) the matched lexeme, in the desired encoding.

Regular expressions are syntactically OCaml patterns:

 - "...." (string constant): recognize the specified string
 - '....' (character constant) : recognize the specified character
 - i (integer constant) : recognize the specified codepoint
 - '...' .. '...': character range
 - i1 .. i2: range between two codepoints
 - R1 | R2 : alternation
 - R1, R2, ..., Rn : concatenation
 - Star R : Kleene star (0 or more repetition)
 - Plus R : equivalent to R, R*
 - Opt R : equivalent to ("" | R)
 - Chars "..." : recognize any character in the string
 - Compl C : complement the specified character set (see below)
 - lid (lowercase identifier) : reference a named character set or
   regexp (see below)

A character set is similar to a regular expression but strictly less
powerful: it allows only a single character to be matched. Thus, its may
only be generated using a subset of the aforementioned patterns:

 - '....' (character constant) : recognize the specified character
 - i (integer constant) : recognize the specified codepoint
 - '...' .. '...': character range
 - i1 .. i2: range between two codepoints
 - C1 | C2 : union of the given character sets
 - Chars "..." : reconize any character within the given string
 - Compl C : complement the specified character set
 - lid (lowercase identifier) : reference a named character set

Note:
 - The OCaml source is assumed to be encoded in Latin1 (for string
   and character literals).

It is possible to define named character sets and regular expressions.

Named regular expressions are defined with the following construction,
that can appear in place of a structure item:

  let lid = [%sedlex.regexp? R]

where lid is the regexp name to be defined and R its definition.  The
scope of the "lid" regular expression is the rest of the structure,
after the definition.

The same syntax can be used for local binding:

  let lid = [%sedlex.regexp? R] in
  body

The scope of "lid" is the body expression.

To define named character sets, an alternate construction is used:

  let lid = [%sedlex.charset? C]

Which can be used in the same contexts as its regular expression
counterpart. Note that every named character set is also a regular
expression (they share the same namespace); the converse however, is not
true.

--------------------------------------------------------------------------
Predefined character sets and regexps

sedlex provides a set of predefined character sets and regexps:
- any: any character
- eof: the virtual end-of-file character
- xml_letter, xml_digit, xml_extender, xml_base_char, xml_ideographic,
  xml_combining_char, xml_blank: as defined by the XML recommandation
- tr8876_ident_char: characters names in identifiers from ISO TR8876
- cc, cf, cn, co, cs, ll, lm, lo, lt, lu, mc, me, mn, nd, nl, no, pc, pd,
  pe, pf, pi, po, ps, sc, sk, sm, so, zl, zp, zs: as defined by the
  Unicode standard (categories)
- alphabetic, ascii_hex_digit, hex_digit, id_continue, id_start,
  lowercase, math, other_alphabetic, other_lowercase, other_math,
  other_uppercase, uppercase, white_space, xid_continue, xid_start: as
  defined by the Unicode standard (properties)

--------------------------------------------------------------------------
Running a lexer

See the interface of the Sedlexing module for a description of how to
create lexbuf values (from strings, stream or channels encoded in
Latin1, utf8 or utf16, or from integer arrays or streams representing
Unicode code points).

It is possible to work with a custom implementation for lex buffers.
To do this, you just have to ensure that a module called Sedlexing is
in scope of your lexer specifications, and that it defines at least
the following functions: start, next, mark, backtrack.  See the interface
of the Sedlexing module for more information.


--------------------------------------------------------------------------
Using sedlex

The quick way:

   opam install sedlex


Otherwise, the first thing to do is to compile and install sedlex.
You need a recent version of OCaml.

  make all
  make opt (* optional *)

1. With findlib

If you have findlib, you can use it to install and use sedlex.
The name of the findlib package is "sedlex".

Installation (after "make all" and "make opt"):

  make install

Compilation of OCaml files with lexer specifications:

  ocamlfind ocamlc -c -package sedlex -ppx "ocamlfind sedlex/ppx_sedlex" my_file.ml

When linking, you must also include the sedlex package:

  ocamlfind ocamlc -o my_prog -linkpkg -package sedlex my_file.cmo


2. Without findlib

You can use sedlex without findlib. To compile, you need to run the
source file through -ppx rewriter ppx_sedlex. Moreover, you need to
link the application with the runtime support library for sedlex
(sedlexing.cma / sedlexing.cmxa).

--------------------------------------------------------------------------
Acknowledgments

Thanks to Benus Becker for contributing an implementation of Utf16.
